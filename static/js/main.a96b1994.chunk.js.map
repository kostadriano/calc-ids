{"version":3,"sources":["serviceWorker.js","components/Table/index.js","models/sample.js","pages/Samples/components/SamplesTable/index.js","models/calculationResult.js","pages/Samples/components/CalculationResultTable/index.js","pages/Samples/components/Calculate/index.js","components/Dropzone/index.js","services/parseSheet.js","models/batchUpload.js","pages/Samples/components/BatchesUploadModal/index.js","utils/getRandomSampleData.js","models/sdiCalc.js","services/calculateData.js","pages/Samples/index.js","pages/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Table","options","props","search","actionsColumnIndex","paging","defaultProps","validations","value","min","Number","samplesTableColumns","title","field","validate","speciesName","lookup","M","F","sex","initialEditValue","size","editComponent","onChange","error","Input","required","placeholder","target","type","generateNewSample","sample","id","getUUID","SamplesTable","samples","onSampleAdd","onSampleDelete","onSampleUpdate","length","data","columns","editable","onRowAdd","newSample","Promise","resolve","onRowUpdate","updatedSample","onRowDelete","deletedSample","addRowPosition","maxBodyHeight","rowStyle","fontSize","calculationResultTableHeaders","CalculationResultTable","result","map","row","malesAverage","toFixed","femalesAverage","SDI","exportButton","Calculate","calculationResult","handleCalculation","disabled","Box","textAlign","marginTop","Button","onClick","variant","color","CustomDropZone","acceptedMimeTypes","classes","React","useState","fileName","setFileName","onDrop","files","rejectedFiles","newFile","name","accept","multiple","getRootProps","getInputProps","isDragActive","isDragReject","className","Dropzone_disabled","Dropzone_onDragReject","Dropzone_onDrag","dropzoneClassName","Dropzone","Dropzone_selectedFile","Typography","label","currentFileName","withStyles","theme","margin","display","flexDirection","alignItems","backgroundColor","padding","minWidth","borderRadius","fontWeight","fontFamily","border","cursor","outline","opacity","spacing","textTransform","file","reject","fileReader","FileReader","onload","readedSheets","XLSX","read","sheetName","SheetNames","sheet","Sheets","dataParsed","utils","sheet_to_row_object_array","onerror","readAsBinaryString","KEYS","FORMATS","format","mimeType","acceptedFormats","parseFile","a","Parser","parsedData","element","Object","keys","reduce","object","key","index","BatchesUploadModal","open","onClose","onSubmit","setData","handleFileDrop","Dialog","fullWidth","disableBackdropClick","DialogTitle","justifyContent","DialogContent","DialogContentText","toString","DialogActions","getRandomSamples","Array","apply","e","Math","floor","random","normalizeSpeciesData","speciesObject","newSpeciesList","currentSpecies","getMalesAndFemales","males","females","getSexAverage","getLovichGibbonsIndex","species","getAverage","Utils","filterBy","array","b","groupBy","attribute","groups","item","currentElements","filter","calculate","groupedSpecies","calculateData","Samples","setSamples","setCalculationResult","modalIsOpen","setModalOpen","marginBottom","getRandomSampleData","marginLeft","updatedSamples","newSamples","setLoading","document","body","classList","add","remove","IndexPage","Container","component","p","mt","py","paragraph","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a96b1994.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport MaterialTable from 'material-table';\n\nconst Table = ({ options, ...props }) =>\n  <MaterialTable\n    options={{\n      search: false,\n      actionsColumnIndex: -1,\n      paging: false,\n      ...options\n    }}\n    {...props}\n  />\n\nTable.defaultProps = {\n  options: {}\n}\n\nexport default Table;\n","import React from 'react';\nimport { Input } from '@material-ui/core';\nimport { v4 as getUUID } from 'uuid';\n\nconst validations = {\n  required: value => value != null && value !== '',\n  min: (value, min) => Number(min) <= Number(value)\n}\n\nexport const samplesTableColumns = [\n  {\n    title: \"Nome da espécie\",\n    field: 'speciesName',\n    validate: ({ speciesName }) => validations.required(speciesName)\n  },\n  {\n    title: \"Sexo\",\n    field: 'sex',\n    lookup: { M: 'M', F: 'F' },\n    validate: ({ sex }) => validations.required(sex)\n  },\n  {\n    title: \"Tamanho\",\n    field: 'size',\n    initialEditValue: 0,\n    validate: ({ size }) => validations.required(size) && validations.min(size, 0),\n    editComponent: ({ value, onChange, error }) =>\n      <Input\n        required\n        placeholder=\"Tamanho\"\n        min=\"0\"\n        value={value}\n        onChange={({ target }) => onChange(target.value)}\n        error={error}\n        type=\"number\"\n      />\n  },\n]\n\nexport const generateNewSample = ({ size, ...sample }) => ({\n  ...sample,\n  size: Number(size),\n  id: getUUID()\n})\n","import React from 'react';\n\nimport Table from '../../../../components/Table';\nimport { samplesTableColumns } from '../../../../models/sample';\n\nconst SamplesTable = ({ samples, onSampleAdd, onSampleDelete, onSampleUpdate }) =>\n  <Table\n    title={`Amostras (${samples.length})`}\n    data={samples}\n    columns={samplesTableColumns}\n    editable={{\n      onRowAdd: newSample =>\n        new Promise((resolve) => {\n          onSampleAdd(newSample);\n\n          resolve();\n        }),\n      onRowUpdate: updatedSample =>\n        new Promise((resolve) => {\n          onSampleUpdate(updatedSample);\n\n          resolve();\n        }),\n      onRowDelete: deletedSample =>\n        new Promise(resolve => {\n          onSampleDelete(deletedSample)\n\n          resolve();\n        })\n    }}\n    options={{\n      addRowPosition: 'first',\n      maxBodyHeight: '250px',\n      rowStyle: {\n        fontSize: '14px'\n      }\n    }}\n  />\n\nexport default SamplesTable;\n","export const calculationResultTableHeaders = [\n  {\n    title: \"Espécie\",\n    field: 'species',\n  },\n  {\n    title: \"Numero de amostras\",\n    field: 'samples',\n  },\n  {\n    title: \"Média tamanho fêmeas\",\n    field: 'femalesAverage',\n  },\n  {\n    title: \"Média tamanho machos\",\n    field: 'malesAverage',\n  },\n  {\n    title: \"SDI\",\n    field: 'SDI',\n  }\n]\n\nexport const deserializeTableValues = data =>\n  data.map(row => ({\n    ...row,\n    samples: row.samples.length,\n    malesAverage: row.malesAverage.toFixed(2),\n    femalesAverage: row.femalesAverage.toFixed(2),\n    SDI: row.SDI.toFixed(2),\n  }))\n","import React from 'react';\nimport Table from '../../../../components/Table';\nimport { calculationResultTableHeaders, deserializeTableValues } from '../../../../models/calculationResult';\n\nconst CalculationResultTable = ({ result }) =>\n  <Table\n    title=\"Resultado do cálculo do SDI\"\n    columns={calculationResultTableHeaders}\n    data={deserializeTableValues(result)}\n    options={{\n      exportButton: true\n    }}\n  />\n\nexport default CalculationResultTable;\n","import React from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport CalculationResultTable from '../CalculationResultTable';\n\nconst Calculate = ({ calculationResult, handleCalculation, disabled }) =>\n  <>\n    <Box textAlign=\"right\" marginTop={5}>\n      <Button\n        onClick={handleCalculation}\n        variant=\"contained\"\n        color=\"secondary\"\n        disabled={disabled}\n      >\n        Calcular SDI\n    </Button>\n    </Box>\n\n    {\n      calculationResult &&\n      <Box marginTop={2}>\n        <CalculationResultTable\n          result={calculationResult}\n        />\n      </Box>\n    }\n  </>\n\nexport default Calculate;\n","import React from 'react'\n\nimport { Typography } from '@material-ui/core'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport UploadIcon from '@material-ui/icons/CloudDownload'\nimport Dropzone from 'react-dropzone'\n\nconst CustomDropZone = ({ acceptedMimeTypes, onChange, classes, disabled }) => {\n  const [fileName, setFileName] = React.useState(null)\n\n  const onFileDrop = (files, rejectedFiles) => {\n    if (rejectedFiles.length > 0) return\n\n    const [newFile] = files;\n\n    onChange(newFile);\n    setFileName(newFile.name);\n  }\n\n  const dropzoneClassName = ({ isDragActive, isDragReject, disabled }) => {\n    if (disabled) {\n      return classes.Dropzone_disabled\n    }\n    if (isDragReject) {\n      return classes.Dropzone_onDragReject\n    }\n    if (isDragActive) {\n      return classes.Dropzone_onDrag\n    }\n\n    return null\n  }\n\n  return (\n    <Dropzone\n      onDrop={onFileDrop}\n      accept={acceptedMimeTypes}\n      multiple={false}\n    >\n      {({ getRootProps, getInputProps, isDragActive, isDragReject }) => {\n        const className = dropzoneClassName({ isDragActive, isDragReject, disabled });\n\n        return (\n          <div\n            variant='contained'\n            color='primary'\n            {...getRootProps()}\n            className={`${classes.Dropzone} ${className}`}\n          >\n            <input {...getInputProps()} />\n            <UploadIcon />\n            <div>\n              {\n                !isDragReject\n                  ? 'Arraste o arquivo aqui, ou clique para adicionar'\n                  : 'Formato não suportado'\n              }\n            </div>\n            {\n              fileName &&\n              <div className={classes.Dropzone_selectedFile}>\n                <Typography>\n                  Selecionado:\n                </Typography>\n                <Typography variant='body1'>\n                  {` ${fileName}`}\n                </Typography>\n              </div>\n            }\n          </div>\n        )\n      }}\n    </Dropzone>\n  )\n}\n\nconst styles = theme => ({\n  Dropzone: {\n    margin: '5px 0',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    color: '#101010',\n    backgroundColor: '#F5F5F5',\n    padding: '10px 16px',\n    fontSize: '0.875rem',\n    minWidth: '64px',\n    borderRadius: '4px',\n    fontWeight: 500,\n    fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n    border: '2px solid transparent',\n    cursor: 'pointer',\n    outline: 'none',\n    '&:hover': {\n      backgroundColor: '#D9D9D9',\n    }\n  },\n  Dropzone_onDrag: {\n    backgroundColor: '#FAFAFA',\n    color: '#497530',\n    border: '2px dashed #497530',\n  },\n  Dropzone_onDragReject: {\n    backgroundColor: '#FAFAFA',\n    color: '#D32F2F',\n    border: '2px dashed #D32F2F',\n  },\n  Dropzone_disabled: {\n    opacity: 0.6,\n    '&:hover': {\n      backgroundColor: 'inherit',\n      cursor: 'not-allowed'\n    }\n  },\n  Dropzone_selectedFile: {\n    color: 'inherit',\n    display: 'flex',\n    marginTop: theme.spacing(),\n    textTransform: 'none'\n  },\n})\n\nCustomDropZone.defaultProps = {\n  onChange: () => { },\n  acceptedMimeTypes: [\n    'image/*'\n  ],\n  label: 'Arquivo',\n  currentFileName: '',\n  disabled: false\n}\nexport default withStyles(styles)(CustomDropZone)\n","import XLSX from 'xlsx';\n\nconst parse = (file) =>\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n\n    fileReader.onload = ({ target: { result: data } }) => {\n      const readedSheets = XLSX.read(data, {\n        type: 'binary'\n      });\n\n      const [sheetName] = readedSheets.SheetNames;\n      const sheet = readedSheets.Sheets[sheetName];\n\n      const dataParsed = XLSX.utils.sheet_to_row_object_array(sheet)\n\n      resolve(dataParsed)\n    };\n\n    fileReader.onerror = (error) => {\n      reject(error);\n    };\n\n    fileReader.readAsBinaryString(file);\n  })\n\nexport default { parse }\n","import Parser from '../services/parseSheet';\n\nconst KEYS = [\n  'speciesName',\n  'sex',\n  'size',\n]\n\nexport const FORMATS = [\n  { format: 'csv', mimeType: 'text/csv' },// .csv\n  { format: 'ods', mimeType: 'application/vnd.oasis.opendocument.spreadsheet' }, // .ods\n  { format: 'xls', mimeType: 'application/vnd.ms-excel' }, //.xls Microsoft Excel\n  { format: 'xlsx', mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }, //.xlsx Microsoft Excel (OpenXML)\n]\n\nexport const acceptedFormats = FORMATS.map(({ format }) => format);\n\nexport const acceptedMimeTypes = FORMATS.map(({ mimeType }) => mimeType);\n\nconst deserializeData = (data) => data.map(element =>\n  Object.keys(element).reduce((object, key, index) => {\n    object[KEYS[index]] = element[key];\n\n    return object\n  }, {})\n)\n\nexport const parseFile = async (file) => {\n  const parsedData = await Parser.parse(file);\n  return (deserializeData(parsedData))\n}\n","import React from 'react';\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  DialogContentText\n} from '@material-ui/core';\n\nimport Dropzone from '../../../../components/Dropzone';\n\nimport { parseFile, acceptedMimeTypes, acceptedFormats } from '../../../../models/batchUpload';\n\nconst BatchesUploadModal = ({ open, onClose, onSubmit }) => {\n  const [data, setData] = React.useState([]);\n\n  const handleFileDrop = async (file) => {\n    const parsedData = await parseFile(file);\n\n    setData(parsedData);\n  }\n\n  const handleSubmit = () => {\n    onSubmit(data);\n  }\n\n  return (\n    <Dialog\n      fullWidth\n      open={open}\n      onClose={onClose}\n      disableBackdropClick\n    >\n      <DialogTitle>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          Adicionar Amostras\n\n        <Button\n            color='primary'\n            variant='outlined'\n            onClick={() => window.open('/s-dimorph/tabela-amostras-exemplo.csv')}\n          >\n            Baixar Modelo\n        </Button>\n        </Box>\n      </DialogTitle>\n\n\n      <DialogContent>\n        <DialogContentText>\n          Formatos aceitos: {acceptedFormats.toString()}\n        </DialogContentText>\n        <Dropzone\n          onChange={handleFileDrop}\n          acceptedMimeTypes={acceptedMimeTypes}\n        />\n      </DialogContent>\n\n      <DialogActions>\n        <Button\n          color='primary'\n          onClick={onClose}\n        >\n          Cancelar\n      </Button>\n\n        <Button\n          color='primary'\n          variant='contained'\n          onClick={handleSubmit}\n        >\n          Confirmar\n      </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nexport default BatchesUploadModal;\n","import { generateNewSample } from '../models/sample';\n\nconst getSpecies = () => [\"A\", \"B\", \"C\"][Math.floor(Math.random() * 3)]\nconst getSize = () => Math.floor(Math.random() * 10);\nconst getSex = () => [\"F\", \"M\"][Math.floor(Math.random() * 2)];\n\nconst getRandomSamples = () => Array.apply(null, Array(35)).map(e =>\n  generateNewSample({\n    speciesName: getSpecies(),\n    sex: getSex(),\n    size: getSize(),\n  })\n);\n\nexport default getRandomSamples;\n","const calculate = samples => {\n  const groupedSpecies = Utils.groupBy(samples, 'speciesName');\n\n  const species = normalizeSpeciesData(groupedSpecies);\n\n  return species;\n}\n\nconst normalizeSpeciesData = speciesObject =>\n  Object.keys(speciesObject).reduce((newSpeciesList, currentSpecies) => {\n    const samples = speciesObject[currentSpecies];\n\n    const { males, females } = getMalesAndFemales(samples);\n    const { malesAverage, femalesAverage } = getSexAverage({ males, females });\n\n    const SDI = getLovichGibbonsIndex({ malesAverage, femalesAverage })\n\n    return [\n      ...newSpeciesList,\n      {\n        species: currentSpecies,\n        samples,\n        males,\n        females,\n        malesAverage,\n        femalesAverage,\n        SDI\n      }\n    ];\n  }, [])\n\nconst getSexAverage = ({ males, females }) => ({\n  malesAverage: getAverage(males),\n  femalesAverage: getAverage(females)\n})\n\nconst getMalesAndFemales = species => ({\n  males: Utils.filterBy(species, 'sex', 'M'),\n  females: Utils.filterBy(species, 'sex', 'F')\n})\n\nconst getAverage = array => !!array.length\n  ? array.reduce((a, b) => (a + Number(b.size || 0)), 0) / array.length\n  : 0\n\nconst getLovichGibbonsIndex = ({ malesAverage, femalesAverage }) =>\n  !(!malesAverage || !femalesAverage)\n    ? malesAverage > femalesAverage\n      ? (((malesAverage / femalesAverage) - 1) * -1)\n      : ((femalesAverage / malesAverage) - 1)\n    : 0\n\nconst Utils = {\n  groupBy: (array, attribute) =>\n    array.reduce((groups, item) => {\n      const currentElements = groups[item[attribute]] || []\n\n      groups[item[attribute]] = [...currentElements, item]\n\n      return groups\n    }, {}),\n  filterBy: (array, attribute, value) =>\n    array.filter(element => element[attribute] === value)\n}\n\n\nexport default calculate;\n","import calculate from '../models/sdiCalc';\n\nconst calculateData = samples => calculate(samples);\n\nexport default calculateData;\n","import React from 'react';\n\nimport SamplesTable from './components/SamplesTable';\nimport Calculate from './components/Calculate';\nimport BatchesUploadModal from './components/BatchesUploadModal';\n\nimport { Button, Box } from '@material-ui/core';\nimport { generateNewSample } from '../../models/sample';\nimport getRandomSampleData from '../../utils/getRandomSampleData';\nimport calculateData from '../../services/calculateData';\n\n\nconst Samples = () => {\n  const [samples, setSamples] = React.useState([]);\n  const [calculationResult, setCalculationResult] = React.useState(null);\n  const [modalIsOpen, setModalOpen] = React.useState(false);\n\n  const handleCalculation = () => {\n    const result = calculateData(samples);\n\n    setCalculationResult(result);\n  }\n\n  const generateRandomSamples = () => {\n    setSamples(getRandomSampleData())\n  }\n\n  const handleSampleAdd = (sample) => {\n    const newSample = generateNewSample(sample)\n\n    setSamples([...samples, newSample])\n  }\n\n  const handleSampleUpdate = (updatedSample) => {\n    const updatedSamples = samples.map(sample =>\n      sample.id === updatedSample.id\n        ? {\n          ...sample,\n          ...updatedSample\n        }\n        : sample\n    )\n\n    setSamples(updatedSamples)\n  }\n\n  const handleDeleteSample = (deletedSample) => {\n    const updatedSamples = samples.filter(sample =>\n      sample.id !== deletedSample.id\n    )\n\n    setSamples(updatedSamples)\n  }\n\n  const handleBatchUploadSamples = (data) => {\n    const newSamples = data.map(generateNewSample);\n\n    setSamples(newSamples);\n    setModalOpen(false);\n  }\n\n  return (\n    <>\n      <Box justifyContent=\"flex-end\" marginBottom={2} display=\"flex\">\n        <Button onClick={generateRandomSamples} variant=\"outlined\" color=\"primary\">\n          Gerar Amostras Aleatórias\n        </Button>\n\n        <Box marginLeft={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => setModalOpen(true)}>\n            Adicionar Amostras por Arquivo\n          </Button>\n        </Box>\n      </Box>\n\n      <SamplesTable\n        samples={samples}\n        onSampleAdd={handleSampleAdd}\n        onSampleDelete={handleDeleteSample}\n        onSampleUpdate={handleSampleUpdate}\n      />\n\n      <Calculate\n        calculationResult={calculationResult}\n        disabled={samples.length === 0}\n        handleCalculation={handleCalculation}\n      />\n\n      <BatchesUploadModal\n        open={modalIsOpen}\n        onClose={() => setModalOpen(false)}\n        onSubmit={handleBatchUploadSamples}\n      />\n    </>\n  )\n}\n\nexport default Samples;\n","import React from 'react';\nimport { Typography, Box, Container } from '@material-ui/core';\nimport Samples from '../pages/Samples';\nimport 'fontsource-roboto';\n\nwindow.setLoading = (value) => value\n  ? document.body.classList.add('loading-indicator')\n  : document.body.classList.remove('loading-indicator')\n\nconst IndexPage = () =>\n  <Container component=\"main\" p={5}>\n    <Box mt={2} py={3} textAlign=\"center\">\n      <Typography variant=\"h2\" paragraph>\n        S-Dimorph\n      </Typography>\n\n      <Samples />\n    </Box>\n  </Container>\n\nexport default IndexPage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport IndexPage from './pages/index';\n\nReactDOM.render(\n  <IndexPage />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}