{"version":3,"sources":["serviceWorker.js","components/Table/index.js","models/sample.js","pages/Samples/components/SamplesTable/index.js","models/calculationResult.js","pages/Samples/components/CalculationResultTable/index.js","pages/Samples/components/Calculate/index.js","pages/Samples/components/BatchesUploadModal/index.js","utils/getRandomSampleData.js","models/sdiCalc.js","services/calculateData.js","pages/Samples/index.js","pages/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Table","options","props","search","actionsColumnIndex","paging","defaultProps","validations","value","min","Number","samplesTableColumns","title","field","validate","speciesName","lookup","M","F","sex","initialEditValue","size","editComponent","onChange","error","Input","required","placeholder","target","type","generateNewSample","sample","id","getUUID","SamplesTable","samples","onSampleAdd","onSampleDelete","onSampleUpdate","length","data","columns","editable","onRowAdd","newSample","Promise","resolve","onRowUpdate","updatedSample","onRowDelete","deletedSample","addRowPosition","maxBodyHeight","rowStyle","fontSize","calculationResultTableHeaders","CalculationResultTable","result","map","row","malesAverage","toFixed","femalesAverage","SDI","exportButton","Calculate","calculationResult","handleCalculation","disabled","Box","textAlign","marginTop","Button","onClick","variant","color","withMobileDialog","open","onClose","Dialog","fullWidth","DialogTitle","display","justifyContent","DialogContent","DialogContentText","DialogActions","getRandomSamples","Array","apply","e","Math","floor","random","normalizeSpeciesData","speciesObject","Object","keys","reduce","newSpeciesList","currentSpecies","getMalesAndFemales","males","females","getSexAverage","getLovichGibbonsIndex","species","getAverage","Utils","filterBy","array","a","b","groupBy","attribute","groups","item","currentElements","filter","element","calculate","groupedSpecies","calculateData","Samples","React","useState","setSamples","setCalculationResult","modalIsOpen","setModalOpen","marginBottom","getRandomSampleData","marginLeft","updatedSamples","IndexPage","Container","component","p","mt","py","Typography","paragraph","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6e7f7b70.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport MaterialTable from 'material-table';\n\nconst Table = ({ options, ...props }) =>\n  <MaterialTable\n    options={{\n      search: false,\n      actionsColumnIndex: -1,\n      paging: false,\n      ...options\n    }}\n    {...props}\n  />\n\nTable.defaultProps = {\n  options: {}\n}\n\nexport default Table;\n","import React from 'react';\nimport { Input } from '@material-ui/core';\nimport { v4 as getUUID } from 'uuid';\n\nconst validations = {\n  required: value => value != null && value !== '',\n  min: (value, min) => Number(min) <= Number(value)\n}\n\nexport const samplesTableColumns = [\n  {\n    title: \"Nome da espécie\",\n    field: 'speciesName',\n    validate: ({ speciesName }) => validations.required(speciesName)\n  },\n  {\n    title: \"Sexo\",\n    field: 'sex',\n    lookup: { M: 'M', F: 'F' },\n    validate: ({ sex }) => validations.required(sex)\n  },\n  {\n    title: \"Tamanho\",\n    field: 'size',\n    initialEditValue: 0,\n    validate: ({ size }) => validations.required(size) && validations.min(size, 0),\n    editComponent: ({ value, onChange, error }) =>\n      <Input\n        required\n        placeholder=\"Tamanho\"\n        min=\"0\"\n        value={value}\n        onChange={({ target }) => onChange(target.value)}\n        error={error}\n        type=\"number\"\n      />\n  },\n]\n\nexport const generateNewSample = sample => ({\n  ...sample,\n  id: getUUID()\n})\n","import React from 'react';\n\nimport Table from '../../../../components/Table';\nimport { samplesTableColumns } from '../../../../models/sample';\n\nconst SamplesTable = ({ samples, onSampleAdd, onSampleDelete, onSampleUpdate }) =>\n  <Table\n    title={`Amostras (${samples.length})`}\n    data={samples}\n    columns={samplesTableColumns}\n    editable={{\n      onRowAdd: newSample =>\n        new Promise((resolve) => {\n          onSampleAdd(newSample);\n\n          resolve();\n        }),\n      onRowUpdate: updatedSample =>\n        new Promise((resolve) => {\n          onSampleUpdate(updatedSample);\n\n          resolve();\n        }),\n      onRowDelete: deletedSample =>\n        new Promise(resolve => {\n          onSampleDelete(deletedSample)\n\n          resolve();\n        })\n    }}\n    options={{\n      addRowPosition: 'first',\n      maxBodyHeight: '250px',\n      rowStyle: {\n        fontSize: '14px'\n      }\n    }}\n  />\n\nexport default SamplesTable;\n","export const calculationResultTableHeaders = [\n  {\n    title: \"Espécie\",\n    field: 'species',\n  },\n  {\n    title: \"Numero de amostras\",\n    field: 'samples',\n  },\n  {\n    title: \"Média tamanho fêmeas\",\n    field: 'femalesAverage',\n  },\n  {\n    title: \"Média tamanho machos\",\n    field: 'malesAverage',\n  },\n  {\n    title: \"SDI\",\n    field: 'SDI',\n  }\n]\n\nexport const deserializeTableValues = data =>\n  data.map(row => ({\n    ...row,\n    samples: row.samples.length,\n    malesAverage: row.malesAverage.toFixed(2),\n    femalesAverage: row.femalesAverage.toFixed(2),\n    SDI: row.SDI.toFixed(2),\n  }))\n","import React from 'react';\nimport Table from '../../../../components/Table';\nimport { calculationResultTableHeaders, deserializeTableValues } from '../../../../models/calculationResult';\n\nconst CalculationResultTable = ({ result }) =>\n  <Table\n    title=\"Resultado do cálculo do SDI\"\n    columns={calculationResultTableHeaders}\n    data={deserializeTableValues(result)}\n    options={{\n      exportButton: true\n    }}\n  />\n\nexport default CalculationResultTable;\n","import React from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport CalculationResultTable from '../CalculationResultTable';\n\nconst Calculate = ({ calculationResult, handleCalculation, disabled }) =>\n  <>\n    <Box textAlign=\"right\" marginTop={5}>\n      <Button\n        onClick={handleCalculation}\n        variant=\"contained\"\n        color=\"secondary\"\n        disabled={disabled}\n      >\n        Calcular SDI\n    </Button>\n    </Box>\n\n    {\n      calculationResult &&\n      <Box marginTop={2}>\n        <CalculationResultTable\n          result={calculationResult}\n        />\n      </Box>\n    }\n  </>\n\nexport default Calculate;\n","import React from 'react';\nimport {\n  Box,\n  Dialog,\n  withMobileDialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  DialogContentText\n} from '@material-ui/core';\n\nconst BatchesUploadModal = ({ open, onClose }) =>\n  <Dialog\n    fullWidth\n    open={open}\n    onClose={onClose}\n  >\n    <DialogTitle>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        Title\n\n        <Button\n          color='primary'\n          variant='outlined'\n          onClick={() => window.open('/s-dimorph/tabela-amostras-exemplo.csv')}\n        >\n          Baixar Modelo\n        </Button>\n      </Box>\n    </DialogTitle>\n\n\n    <DialogContent>\n      <DialogContentText>\n        My Text\n      </DialogContentText>\n    </DialogContent>\n\n    <DialogActions>\n      <Button\n        color='primary'\n        onClick={onClose}\n      >\n        Cancelar\n      </Button>\n\n      <Button\n        color='primary'\n        variant='contained'\n      >\n        Confirmar\n      </Button>\n    </DialogActions>\n  </Dialog>\n\nexport default withMobileDialog()(BatchesUploadModal);\n","import { generateNewSample } from '../models/sample';\n\nconst getSpecies = () => [\"A\", \"B\", \"C\"][Math.floor(Math.random() * 3)]\nconst getSize = () => Math.floor(Math.random() * 10);\nconst getSex = () => [\"F\", \"M\"][Math.floor(Math.random() * 2)];\n\nconst getRandomSamples = () => Array.apply(null, Array(35)).map(e =>\n  generateNewSample({\n    speciesName: getSpecies(),\n    sex: getSex(),\n    size: getSize(),\n  })\n);\n\nexport default getRandomSamples;\n","const calculate = samples => {\n  const groupedSpecies = Utils.groupBy(samples, 'speciesName');\n\n  const species = normalizeSpeciesData(groupedSpecies);\n\n  return species;\n}\n\nconst normalizeSpeciesData = speciesObject =>\n  Object.keys(speciesObject).reduce((newSpeciesList, currentSpecies) => {\n    const samples = speciesObject[currentSpecies];\n\n    const { males, females } = getMalesAndFemales(samples);\n    const { malesAverage, femalesAverage } = getSexAverage({ males, females });\n\n    const SDI = getLovichGibbonsIndex({ malesAverage, femalesAverage })\n\n    return [\n      ...newSpeciesList,\n      {\n        species: currentSpecies,\n        samples,\n        males,\n        females,\n        malesAverage,\n        femalesAverage,\n        SDI\n      }\n    ];\n  }, [])\n\nconst getSexAverage = ({ males, females }) => ({\n  malesAverage: getAverage(males),\n  femalesAverage: getAverage(females)\n})\n\nconst getMalesAndFemales = species => ({\n  males: Utils.filterBy(species, 'sex', 'M'),\n  females: Utils.filterBy(species, 'sex', 'F')\n})\n\nconst getAverage = array =>\n  array.reduce((a, b) => (a + Number(b.size || 0)), 0) / array.length;\n\nconst getLovichGibbonsIndex = ({ malesAverage, femalesAverage }) =>\n  malesAverage > femalesAverage\n    ? (((malesAverage / femalesAverage) - 1) * -1)\n    : ((femalesAverage / malesAverage) - 1)\n\nconst Utils = {\n  groupBy: (array, attribute) =>\n    array.reduce((groups, item) => {\n      const currentElements = groups[item[attribute]] || []\n\n      groups[item[attribute]] = [...currentElements, item]\n\n      return groups\n    }, {}),\n  filterBy: (array, attribute, value) =>\n    array.filter(element => element[attribute] === value)\n}\n\n\nexport default calculate;\n","import calculate from '../models/sdiCalc';\n\nconst calculateData = samples => calculate(samples);\n\nexport default calculateData;\n","import React from 'react';\n\nimport SamplesTable from './components/SamplesTable';\nimport Calculate from './components/Calculate';\nimport BatchesUploadModal from './components/BatchesUploadModal';\n\nimport { Button, Box } from '@material-ui/core';\nimport { generateNewSample } from '../../models/sample';\nimport getRandomSampleData from '../../utils/getRandomSampleData';\nimport calculateData from '../../services/calculateData';\n\n\nconst Samples = () => {\n  const [samples, setSamples] = React.useState([]);\n  const [calculationResult, setCalculationResult] = React.useState(null);\n  const [modalIsOpen, setModalOpen] = React.useState(false);\n\n  const handleCalculation = () => {\n    const result = calculateData(samples);\n\n    setCalculationResult(result);\n  }\n\n  const generateRandomSamples = () => {\n    setSamples(getRandomSampleData())\n  }\n\n  const handleSampleAdd = (sample) => {\n    const newSample = generateNewSample(sample)\n\n    setSamples([...samples, newSample])\n  }\n\n  const handleSampleUpdate = (updatedSample) => {\n    const updatedSamples = samples.map(sample =>\n      sample.id === updatedSample.id\n        ? {\n          ...sample,\n          ...updatedSample\n        }\n        : sample\n    )\n\n    setSamples(updatedSamples)\n  }\n\n  const handleDeleteSample = (deletedSample) => {\n    const updatedSamples = samples.filter(sample =>\n      sample.id !== deletedSample.id\n    )\n\n    setSamples(updatedSamples)\n  }\n\n  return (\n    <>\n      <Box justifyContent=\"flex-end\" marginBottom={2} display=\"flex\">\n        <Button onClick={generateRandomSamples} variant=\"outlined\" color=\"primary\">\n          Gerar Amostras Aleatórias\n        </Button>\n\n        <Box marginLeft={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => setModalOpen(true)}>\n            Adicionar Amostras por Arquivo\n          </Button>\n        </Box>\n      </Box>\n\n      <SamplesTable\n        samples={samples}\n        onSampleAdd={handleSampleAdd}\n        onSampleDelete={handleDeleteSample}\n        onSampleUpdate={handleSampleUpdate}\n      />\n\n      <Calculate\n        calculationResult={calculationResult}\n        disabled={samples.length === 0}\n        handleCalculation={handleCalculation}\n      />\n\n      <BatchesUploadModal\n        open={modalIsOpen}\n        onClose={() => setModalOpen(false)}\n      >\n\n      </BatchesUploadModal>\n    </>\n  )\n}\n\nexport default Samples;\n","import React from 'react';\nimport { Typography, Box, Container } from '@material-ui/core';\nimport Samples from '../pages/Samples';\nimport 'fontsource-roboto';\n\nconst IndexPage = () =>\n  <Container component=\"main\" p={5}>\n    <Box mt={2} py={3} textAlign=\"center\">\n      <Typography variant=\"h2\" paragraph>\n        S-Dimorph\n      </Typography>\n\n      <Samples />\n    </Box>\n  </Container>\n\nexport default IndexPage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport IndexPage from './pages/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <IndexPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}